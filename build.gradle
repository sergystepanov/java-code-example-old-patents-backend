plugins {
    id 'application'
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '2.3.4.RELEASE'

    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "com.github.ben-manes.versions" version '0.33.0'
}

group = 'ru.ineureka'
version = findProperty('projVersion') ?: '1.2.0-SNAPSHOT'

application {
    mainClassName = 'ru.ineureka.patents.App'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.6'
    }

    distTar.enabled = false
    distZip.enabled = false

    repositories {
        maven() {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        jcenter()
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_14
        targetCompatibility = JavaVersion.VERSION_14
    }

    compileJava {
        options.compilerArgs << '-Xlint:all'
        options.warnings = true
        options.deprecation = true
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }
}

ext.getHash = { def git = 'git rev-parse HEAD'.execute(); git.waitFor(); git.text.strip() }

springBoot {
    buildInfo {
        properties {
            name = 'Patents III'
            additional = [
                    'commit': getHash()
            ]
        }
    }
}

test {
    systemProperty 'spring.profiles.active', 'test'
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.enabled false
        html.enabled false
    }

    def classes = []
    def sources = []
    def execution = []
    allprojects.each {
        def classTree = fileTree(dir: "${it.buildDir}/classes/java/main", include: 'ru/ineureka/**')
        classTree.exclude '**/*App.class'
        classes << classTree

        def module = it
        ['java', 'groovy', 'resources'].each {
            def dir = file "${module.projectDir}/src/main/${it}"
            if (dir.exists()) sources << dir
        }

        def exFile = file("${it.buildDir}/jacoco/test.exec")
        if (exFile.exists()) execution << exFile
    }

    classDirectories.from = classes
    sourceDirectories.from = sources
    executionData.from = execution
}

bootJar {
    launchScript()
}

ext {
    // languages
    groovyVersion = '2.5.12'
    // auth
    jjwtVersion = '0.11.2'
    // data
    jacksonVersion = '2.11.2'
    // validation
    hibernateValidatorVersion = '6.1.5.Final'
    // http
    jsoupVersion = '1.13.1'
    // db
    flywayVersion = '6.5.5'
    // logging
    floggerVersion = '0.5.1'
    // testing
    spockVersion = '1.3-groovy-2.5'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation project(':auth')
    implementation project(':office')
    implementation project(':reader')
    implementation project(':http')
    implementation project(':legacy')
    implementation project(':documents')

    implementation "com.google.flogger:flogger:${floggerVersion}"
    implementation "com.google.flogger:flogger-system-backend:${floggerVersion}"
    runtimeOnly "com.google.flogger:flogger-slf4j-backend:${floggerVersion}"

    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    runtimeOnly 'com.h2database:h2'

    implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"

    testImplementation("org.spockframework:spock-core:${spockVersion}") {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
}
